plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'com.modrinth.minotaur' version '2.+'
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(':common').loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
    }
}

configurations {
    common
    shadowCommon
    // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forgeVersion}"

    // Cloth-Config
    modApi("me.shedaniel.cloth:cloth-config-forge:${rootProject.clothConfigVersion}")

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowCommon(project(path: ':common', configuration: 'transformProductionForge')) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching('META-INF/mods.toml') {
        expand 'version': project.version
    }
}

shadowJar {
    exclude 'fabric.mod.json'
    exclude 'architectury.common.json'

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier 'dev'
}

sourcesJar {
    def commonSources = project(':common').sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

// Include both common and forge documentation in the javadoc
def javadocProjects = [':forge', ':common']
javadoc {
    source = javadocProjects.collect { project(it).sourceSets.main.allJava }
    classpath = files(javadocProjects.collect { project(it).sourceSets.main.compileClasspath })
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            groupId = project.group
            artifactId = "${project.archivesBaseName}-forge"
            version = project.version

            artifact(remapJar) {
                builtBy remapJar
            }

            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }

            artifact(javadocJar) {
                builtBy javadocJar
            }

            pom rootProject.ext.makePom(project)
        }
    }
}

signing {
    def signingKey = findProperty('signingKey')
    def signingPassword = findProperty('signingPassword')
    if (signingKey && signingPassword) {
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications.mavenForge
    } else {
        println("${project.name}: skipping jar signing")
    }
}
tasks.curseforge.enabled = !project.projectBaseVersion.contains('SNAPSHOT') && System.getenv('CURSE_API_KEY') && project.hasProperty('curseProjectId')

curseforge {
    if (System.getenv('CURSE_API_KEY'))
        apiKey = System.getenv('CURSE_API_KEY')

    project {
        id = project.curseProjectId
        changelog = rootProject.parseChangelog('changelog.txt')
        releaseType = rootProject.getReleaseType()
        for (gameVersion in project.hostGameVersions.split(',')) {
            addGameVersion gameVersion
        }
        addGameVersion 'Forge'
        addGameVersion 'Java 17'
        mainArtifact(remapJar) {
            displayName = "[Forge $project.mcVersionFull] v${project.version}"
        }
        relations {
            requiredDependency 'cloth-config'
        }
    }
    options {
        forgeGradleIntegration = false
        javaVersionAutoDetect = false
    }
}

afterEvaluate {
    // Manually set dependsOn because curseforge doesn't set one.
    tasks."curseforge${project.curseProjectId}".dependsOn remapJar
}

tasks.modrinth.enabled = !project.projectBaseVersion.contains('SNAPSHOT') && System.getenv('MODRINTH_TOKEN') && project.hasProperty('modrinthProjectId')

modrinth {
    token = System.getenv('MODRINTH_TOKEN')
    projectId = modrinthProjectId
    versionNumber = version
    versionName = "[Forge $project.mcVersionFull] v${project.version}"
    versionType = project.getReleaseType()
    changelog = rootProject.parseChangelog('changelog.txt')
    uploadFile = remapJar
    gameVersions = hostGameVersions.split(',').toList()
    loaders = ['forge']
    dependencies {
        required.project '9s6osm5g' // cloth-config-api
    }
}
